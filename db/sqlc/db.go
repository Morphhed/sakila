// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createActorStmt, err = db.PrepareContext(ctx, createActor); err != nil {
		return nil, fmt.Errorf("error preparing query CreateActor: %w", err)
	}
	if q.createCityStmt, err = db.PrepareContext(ctx, createCity); err != nil {
		return nil, fmt.Errorf("error preparing query CreateCity: %w", err)
	}
	if q.createCountryStmt, err = db.PrepareContext(ctx, createCountry); err != nil {
		return nil, fmt.Errorf("error preparing query CreateCountry: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.deleteActorStmt, err = db.PrepareContext(ctx, deleteActor); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteActor: %w", err)
	}
	if q.deleteCityStmt, err = db.PrepareContext(ctx, deleteCity); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteCity: %w", err)
	}
	if q.deleteCountryStmt, err = db.PrepareContext(ctx, deleteCountry); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteCountry: %w", err)
	}
	if q.getActorStmt, err = db.PrepareContext(ctx, getActor); err != nil {
		return nil, fmt.Errorf("error preparing query GetActor: %w", err)
	}
	if q.getCityStmt, err = db.PrepareContext(ctx, getCity); err != nil {
		return nil, fmt.Errorf("error preparing query GetCity: %w", err)
	}
	if q.getCountryStmt, err = db.PrepareContext(ctx, getCountry); err != nil {
		return nil, fmt.Errorf("error preparing query GetCountry: %w", err)
	}
	if q.getUserByUsernameStmt, err = db.PrepareContext(ctx, getUserByUsername); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByUsername: %w", err)
	}
	if q.listActorsStmt, err = db.PrepareContext(ctx, listActors); err != nil {
		return nil, fmt.Errorf("error preparing query ListActors: %w", err)
	}
	if q.listCitiesStmt, err = db.PrepareContext(ctx, listCities); err != nil {
		return nil, fmt.Errorf("error preparing query ListCities: %w", err)
	}
	if q.listCitiesByCountryStmt, err = db.PrepareContext(ctx, listCitiesByCountry); err != nil {
		return nil, fmt.Errorf("error preparing query ListCitiesByCountry: %w", err)
	}
	if q.listCountriesStmt, err = db.PrepareContext(ctx, listCountries); err != nil {
		return nil, fmt.Errorf("error preparing query ListCountries: %w", err)
	}
	if q.updateActorStmt, err = db.PrepareContext(ctx, updateActor); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateActor: %w", err)
	}
	if q.updateCityStmt, err = db.PrepareContext(ctx, updateCity); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateCity: %w", err)
	}
	if q.updateCountryStmt, err = db.PrepareContext(ctx, updateCountry); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateCountry: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createActorStmt != nil {
		if cerr := q.createActorStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createActorStmt: %w", cerr)
		}
	}
	if q.createCityStmt != nil {
		if cerr := q.createCityStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createCityStmt: %w", cerr)
		}
	}
	if q.createCountryStmt != nil {
		if cerr := q.createCountryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createCountryStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.deleteActorStmt != nil {
		if cerr := q.deleteActorStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteActorStmt: %w", cerr)
		}
	}
	if q.deleteCityStmt != nil {
		if cerr := q.deleteCityStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteCityStmt: %w", cerr)
		}
	}
	if q.deleteCountryStmt != nil {
		if cerr := q.deleteCountryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteCountryStmt: %w", cerr)
		}
	}
	if q.getActorStmt != nil {
		if cerr := q.getActorStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getActorStmt: %w", cerr)
		}
	}
	if q.getCityStmt != nil {
		if cerr := q.getCityStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCityStmt: %w", cerr)
		}
	}
	if q.getCountryStmt != nil {
		if cerr := q.getCountryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCountryStmt: %w", cerr)
		}
	}
	if q.getUserByUsernameStmt != nil {
		if cerr := q.getUserByUsernameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByUsernameStmt: %w", cerr)
		}
	}
	if q.listActorsStmt != nil {
		if cerr := q.listActorsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listActorsStmt: %w", cerr)
		}
	}
	if q.listCitiesStmt != nil {
		if cerr := q.listCitiesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listCitiesStmt: %w", cerr)
		}
	}
	if q.listCitiesByCountryStmt != nil {
		if cerr := q.listCitiesByCountryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listCitiesByCountryStmt: %w", cerr)
		}
	}
	if q.listCountriesStmt != nil {
		if cerr := q.listCountriesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listCountriesStmt: %w", cerr)
		}
	}
	if q.updateActorStmt != nil {
		if cerr := q.updateActorStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateActorStmt: %w", cerr)
		}
	}
	if q.updateCityStmt != nil {
		if cerr := q.updateCityStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateCityStmt: %w", cerr)
		}
	}
	if q.updateCountryStmt != nil {
		if cerr := q.updateCountryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateCountryStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                      DBTX
	tx                      *sql.Tx
	createActorStmt         *sql.Stmt
	createCityStmt          *sql.Stmt
	createCountryStmt       *sql.Stmt
	createUserStmt          *sql.Stmt
	deleteActorStmt         *sql.Stmt
	deleteCityStmt          *sql.Stmt
	deleteCountryStmt       *sql.Stmt
	getActorStmt            *sql.Stmt
	getCityStmt             *sql.Stmt
	getCountryStmt          *sql.Stmt
	getUserByUsernameStmt   *sql.Stmt
	listActorsStmt          *sql.Stmt
	listCitiesStmt          *sql.Stmt
	listCitiesByCountryStmt *sql.Stmt
	listCountriesStmt       *sql.Stmt
	updateActorStmt         *sql.Stmt
	updateCityStmt          *sql.Stmt
	updateCountryStmt       *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                      tx,
		tx:                      tx,
		createActorStmt:         q.createActorStmt,
		createCityStmt:          q.createCityStmt,
		createCountryStmt:       q.createCountryStmt,
		createUserStmt:          q.createUserStmt,
		deleteActorStmt:         q.deleteActorStmt,
		deleteCityStmt:          q.deleteCityStmt,
		deleteCountryStmt:       q.deleteCountryStmt,
		getActorStmt:            q.getActorStmt,
		getCityStmt:             q.getCityStmt,
		getCountryStmt:          q.getCountryStmt,
		getUserByUsernameStmt:   q.getUserByUsernameStmt,
		listActorsStmt:          q.listActorsStmt,
		listCitiesStmt:          q.listCitiesStmt,
		listCitiesByCountryStmt: q.listCitiesByCountryStmt,
		listCountriesStmt:       q.listCountriesStmt,
		updateActorStmt:         q.updateActorStmt,
		updateCityStmt:          q.updateCityStmt,
		updateCountryStmt:       q.updateCountryStmt,
	}
}
