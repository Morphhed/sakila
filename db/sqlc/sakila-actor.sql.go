// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: sakila-actor.sql

package db

import (
	"context"
	"database/sql"
)

const createActor = `-- name: CreateActor :execresult
INSERT INTO actor (first_name, last_name) VALUES (?, ?)
`

type CreateActorParams struct {
	FirstName string `db:"first_name" json:"first_name"`
	LastName  string `db:"last_name" json:"last_name"`
}

func (q *Queries) CreateActor(ctx context.Context, arg CreateActorParams) (sql.Result, error) {
	return q.exec(ctx, q.createActorStmt, createActor, arg.FirstName, arg.LastName)
}

const deleteActor = `-- name: DeleteActor :exec
DELETE FROM actor WHERE actor_id = ?
`

func (q *Queries) DeleteActor(ctx context.Context, actorID uint16) error {
	_, err := q.exec(ctx, q.deleteActorStmt, deleteActor, actorID)
	return err
}

const getActor = `-- name: GetActor :one
SELECT actor_id, first_name, last_name, last_update FROM actor WHERE actor_id = ? LIMIT 1
`

func (q *Queries) GetActor(ctx context.Context, actorID uint16) (Actor, error) {
	row := q.queryRow(ctx, q.getActorStmt, getActor, actorID)
	var i Actor
	err := row.Scan(
		&i.ActorID,
		&i.FirstName,
		&i.LastName,
		&i.LastUpdate,
	)
	return i, err
}

const listActors = `-- name: ListActors :many
SELECT actor_id, first_name, last_name, last_update FROM actor
`

func (q *Queries) ListActors(ctx context.Context) ([]Actor, error) {
	rows, err := q.query(ctx, q.listActorsStmt, listActors)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Actor{}
	for rows.Next() {
		var i Actor
		if err := rows.Scan(
			&i.ActorID,
			&i.FirstName,
			&i.LastName,
			&i.LastUpdate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateActor = `-- name: UpdateActor :exec
UPDATE actor
SET first_name = ?, last_name = ?
WHERE actor_id = ?
`

type UpdateActorParams struct {
	FirstName string `db:"first_name" json:"first_name"`
	LastName  string `db:"last_name" json:"last_name"`
	ActorID   uint16 `db:"actor_id" json:"actor_id"`
}

func (q *Queries) UpdateActor(ctx context.Context, arg UpdateActorParams) error {
	_, err := q.exec(ctx, q.updateActorStmt, updateActor, arg.FirstName, arg.LastName, arg.ActorID)
	return err
}
