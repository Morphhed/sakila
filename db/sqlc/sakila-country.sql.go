// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: sakila-country.sql

package db

import (
	"context"
	"database/sql"
)

const createCountry = `-- name: CreateCountry :execresult
INSERT INTO country (country) VALUES (?)
`

func (q *Queries) CreateCountry(ctx context.Context, country string) (sql.Result, error) {
	return q.exec(ctx, q.createCountryStmt, createCountry, country)
}

const deleteCountry = `-- name: DeleteCountry :exec
DELETE FROM country WHERE country_id = ?
`

func (q *Queries) DeleteCountry(ctx context.Context, countryID uint16) error {
	_, err := q.exec(ctx, q.deleteCountryStmt, deleteCountry, countryID)
	return err
}

const getCountry = `-- name: GetCountry :one
SELECT country_id, country, last_update FROM country WHERE country_id = ? LIMIT 1
`

func (q *Queries) GetCountry(ctx context.Context, countryID uint16) (Country, error) {
	row := q.queryRow(ctx, q.getCountryStmt, getCountry, countryID)
	var i Country
	err := row.Scan(&i.CountryID, &i.Country, &i.LastUpdate)
	return i, err
}

const listCountries = `-- name: ListCountries :many
SELECT country_id, country, last_update FROM country ORDER BY country_id
`

func (q *Queries) ListCountries(ctx context.Context) ([]Country, error) {
	rows, err := q.query(ctx, q.listCountriesStmt, listCountries)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Country{}
	for rows.Next() {
		var i Country
		if err := rows.Scan(&i.CountryID, &i.Country, &i.LastUpdate); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCountry = `-- name: UpdateCountry :exec
UPDATE country SET country = ? WHERE country_id = ?
`

type UpdateCountryParams struct {
	Country   string `db:"country" json:"country"`
	CountryID uint16 `db:"country_id" json:"country_id"`
}

func (q *Queries) UpdateCountry(ctx context.Context, arg UpdateCountryParams) error {
	_, err := q.exec(ctx, q.updateCountryStmt, updateCountry, arg.Country, arg.CountryID)
	return err
}
